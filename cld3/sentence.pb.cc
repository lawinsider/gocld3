// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sentence.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sentence.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace chrome_lang_id {

void protobuf_ShutdownFile_sentence_2eproto() {
  delete Sentence::default_instance_;
  delete Token::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_sentence_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_sentence_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  Sentence::default_instance_ = new Sentence();
  Token::default_instance_ = new Token();
  Sentence::default_instance_->InitAsDefaultInstance();
  Token::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_sentence_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_sentence_2eproto_once_);
void protobuf_AddDesc_sentence_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_sentence_2eproto_once_,
                 &protobuf_AddDesc_sentence_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_sentence_2eproto {
  StaticDescriptorInitializer_sentence_2eproto() {
    protobuf_AddDesc_sentence_2eproto();
  }
} static_descriptor_initializer_sentence_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int Sentence::kIdFieldNumber;
const int Sentence::kTextFieldNumber;
const int Sentence::kTokenFieldNumber;
#endif  // !_MSC_VER

Sentence::Sentence()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Sentence::InitAsDefaultInstance() {
}

Sentence::Sentence(const Sentence& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Sentence::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sentence::~Sentence() {
  SharedDtor();
}

void Sentence::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Sentence::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Sentence& Sentence::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_sentence_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_sentence_2eproto();
#endif
  return *default_instance_;
}

Sentence* Sentence::default_instance_ = NULL;

Sentence* Sentence::New() const {
  return new Sentence;
}

void Sentence::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
  }
  token_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Sentence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_text;
        break;
      }

      // optional string text = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_token;
        break;
      }

      // repeated .chrome_lang_id.Token token = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_token()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_token;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((8000u <= tag)) {
        #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
          DO_(_extensions_.ParseField(tag, input, &default_instance()));
        #else
          DO_(_extensions_.ParseField(tag, input, default_instance_));
        #endif
          continue;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sentence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // optional string text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->text(), output);
  }

  // repeated .chrome_lang_id.Token token = 3;
  for (int i = 0; i < this->token_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->token(i), output);
  }

  // Extension range [1000, 536870912)
  _extensions_.SerializeWithCachedSizes(
      1000, 536870912, output);

}

int Sentence::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string text = 2;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

  }
  // repeated .chrome_lang_id.Token token = 3;
  total_size += 1 * this->token_size();
  for (int i = 0; i < this->token_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->token(i));
  }

  total_size += _extensions_.ByteSize();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sentence::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Sentence*>(&from));
}

void Sentence::MergeFrom(const Sentence& from) {
  GOOGLE_CHECK_NE(&from, this);
  token_.MergeFrom(from.token_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
}

void Sentence::CopyFrom(const Sentence& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sentence::IsInitialized() const {

  for (int i = 0; i < token_size(); i++) {
    if (!this->token(i).IsInitialized()) return false;
  }

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void Sentence::Swap(Sentence* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(text_, other->text_);
    token_.Swap(&other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::std::string Sentence::GetTypeName() const {
  return "chrome_lang_id.Sentence";
}


// ===================================================================

bool Token_BreakLevel_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Token_BreakLevel Token::NO_BREAK;
const Token_BreakLevel Token::SPACE_BREAK;
const Token_BreakLevel Token::LINE_BREAK;
const Token_BreakLevel Token::SENTENCE_BREAK;
const Token_BreakLevel Token::BreakLevel_MIN;
const Token_BreakLevel Token::BreakLevel_MAX;
const int Token::BreakLevel_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Token::kWordFieldNumber;
const int Token::kStartFieldNumber;
const int Token::kEndFieldNumber;
const int Token::kHeadFieldNumber;
const int Token::kTagFieldNumber;
const int Token::kCategoryFieldNumber;
const int Token::kLabelFieldNumber;
const int Token::kBreakLevelFieldNumber;
#endif  // !_MSC_VER

Token::Token()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Token::InitAsDefaultInstance() {
}

Token::Token(const Token& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Token::SharedCtor() {
  _cached_size_ = 0;
  word_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  start_ = 0;
  end_ = 0;
  head_ = -1;
  tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  category_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  label_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  break_level_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Token::~Token() {
  SharedDtor();
}

void Token::SharedDtor() {
  if (word_ != &::google::protobuf::internal::kEmptyString) {
    delete word_;
  }
  if (tag_ != &::google::protobuf::internal::kEmptyString) {
    delete tag_;
  }
  if (category_ != &::google::protobuf::internal::kEmptyString) {
    delete category_;
  }
  if (label_ != &::google::protobuf::internal::kEmptyString) {
    delete label_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Token::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Token& Token::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_sentence_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_sentence_2eproto();
#endif
  return *default_instance_;
}

Token* Token::default_instance_ = NULL;

Token* Token::New() const {
  return new Token;
}

void Token::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_word()) {
      if (word_ != &::google::protobuf::internal::kEmptyString) {
        word_->clear();
      }
    }
    start_ = 0;
    end_ = 0;
    head_ = -1;
    if (has_tag()) {
      if (tag_ != &::google::protobuf::internal::kEmptyString) {
        tag_->clear();
      }
    }
    if (has_category()) {
      if (category_ != &::google::protobuf::internal::kEmptyString) {
        category_->clear();
      }
    }
    if (has_label()) {
      if (label_ != &::google::protobuf::internal::kEmptyString) {
        label_->clear();
      }
    }
    break_level_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Token::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string word = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_word()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_start;
        break;
      }

      // required int32 start = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_)));
          set_has_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_end;
        break;
      }

      // required int32 end = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_)));
          set_has_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_head;
        break;
      }

      // optional int32 head = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &head_)));
          set_has_head();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_tag;
        break;
      }

      // optional string tag = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_category;
        break;
      }

      // optional string category = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_category:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_category()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_label;
        break;
      }

      // optional string label = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_label:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_break_level;
        break;
      }

      // optional .chrome_lang_id.Token.BreakLevel break_level = 8 [default = SPACE_BREAK];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_break_level:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::chrome_lang_id::Token_BreakLevel_IsValid(value)) {
            set_break_level(static_cast< ::chrome_lang_id::Token_BreakLevel >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((8000u <= tag)) {
        #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
          DO_(_extensions_.ParseField(tag, input, &default_instance()));
        #else
          DO_(_extensions_.ParseField(tag, input, default_instance_));
        #endif
          continue;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Token::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string word = 1;
  if (has_word()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->word(), output);
  }

  // required int32 start = 2;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->start(), output);
  }

  // required int32 end = 3;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->end(), output);
  }

  // optional int32 head = 4 [default = -1];
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->head(), output);
  }

  // optional string tag = 5;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->tag(), output);
  }

  // optional string category = 6;
  if (has_category()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->category(), output);
  }

  // optional string label = 7;
  if (has_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->label(), output);
  }

  // optional .chrome_lang_id.Token.BreakLevel break_level = 8 [default = SPACE_BREAK];
  if (has_break_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->break_level(), output);
  }

  // Extension range [1000, 536870912)
  _extensions_.SerializeWithCachedSizes(
      1000, 536870912, output);

}

int Token::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string word = 1;
    if (has_word()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->word());
    }

    // required int32 start = 2;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start());
    }

    // required int32 end = 3;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end());
    }

    // optional int32 head = 4 [default = -1];
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->head());
    }

    // optional string tag = 5;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag());
    }

    // optional string category = 6;
    if (has_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->category());
    }

    // optional string label = 7;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }

    // optional .chrome_lang_id.Token.BreakLevel break_level = 8 [default = SPACE_BREAK];
    if (has_break_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->break_level());
    }

  }
  total_size += _extensions_.ByteSize();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Token::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Token*>(&from));
}

void Token::MergeFrom(const Token& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_word()) {
      set_word(from.word());
    }
    if (from.has_start()) {
      set_start(from.start());
    }
    if (from.has_end()) {
      set_end(from.end());
    }
    if (from.has_head()) {
      set_head(from.head());
    }
    if (from.has_tag()) {
      set_tag(from.tag());
    }
    if (from.has_category()) {
      set_category(from.category());
    }
    if (from.has_label()) {
      set_label(from.label());
    }
    if (from.has_break_level()) {
      set_break_level(from.break_level());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
}

void Token::CopyFrom(const Token& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Token::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void Token::Swap(Token* other) {
  if (other != this) {
    std::swap(word_, other->word_);
    std::swap(start_, other->start_);
    std::swap(end_, other->end_);
    std::swap(head_, other->head_);
    std::swap(tag_, other->tag_);
    std::swap(category_, other->category_);
    std::swap(label_, other->label_);
    std::swap(break_level_, other->break_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::std::string Token::GetTypeName() const {
  return "chrome_lang_id.Token";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace chrome_lang_id

// @@protoc_insertion_point(global_scope)
