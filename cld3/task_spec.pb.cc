// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: task_spec.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "task_spec.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace chrome_lang_id {

void protobuf_ShutdownFile_task_5fspec_2eproto() {
  delete TaskInput::default_instance_;
  delete TaskInput_Part::default_instance_;
  delete TaskOutput::default_instance_;
  delete TaskSpec::default_instance_;
  delete TaskSpec_Parameter::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_task_5fspec_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_task_5fspec_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  TaskInput::default_instance_ = new TaskInput();
  TaskInput_Part::default_instance_ = new TaskInput_Part();
  TaskOutput::default_instance_ = new TaskOutput();
  TaskSpec::default_instance_ = new TaskSpec();
  TaskSpec_Parameter::default_instance_ = new TaskSpec_Parameter();
  TaskInput::default_instance_->InitAsDefaultInstance();
  TaskInput_Part::default_instance_->InitAsDefaultInstance();
  TaskOutput::default_instance_->InitAsDefaultInstance();
  TaskSpec::default_instance_->InitAsDefaultInstance();
  TaskSpec_Parameter::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_task_5fspec_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_task_5fspec_2eproto_once_);
void protobuf_AddDesc_task_5fspec_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_task_5fspec_2eproto_once_,
                 &protobuf_AddDesc_task_5fspec_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_task_5fspec_2eproto {
  StaticDescriptorInitializer_task_5fspec_2eproto() {
    protobuf_AddDesc_task_5fspec_2eproto();
  }
} static_descriptor_initializer_task_5fspec_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int TaskInput_Part::kFilePatternFieldNumber;
const int TaskInput_Part::kFileFormatFieldNumber;
const int TaskInput_Part::kRecordFormatFieldNumber;
#endif  // !_MSC_VER

TaskInput_Part::TaskInput_Part()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TaskInput_Part::InitAsDefaultInstance() {
}

TaskInput_Part::TaskInput_Part(const TaskInput_Part& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TaskInput_Part::SharedCtor() {
  _cached_size_ = 0;
  file_pattern_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  file_format_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  record_format_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskInput_Part::~TaskInput_Part() {
  SharedDtor();
}

void TaskInput_Part::SharedDtor() {
  if (file_pattern_ != &::google::protobuf::internal::kEmptyString) {
    delete file_pattern_;
  }
  if (file_format_ != &::google::protobuf::internal::kEmptyString) {
    delete file_format_;
  }
  if (record_format_ != &::google::protobuf::internal::kEmptyString) {
    delete record_format_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TaskInput_Part::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TaskInput_Part& TaskInput_Part::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_task_5fspec_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_task_5fspec_2eproto();
#endif
  return *default_instance_;
}

TaskInput_Part* TaskInput_Part::default_instance_ = NULL;

TaskInput_Part* TaskInput_Part::New() const {
  return new TaskInput_Part;
}

void TaskInput_Part::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_file_pattern()) {
      if (file_pattern_ != &::google::protobuf::internal::kEmptyString) {
        file_pattern_->clear();
      }
    }
    if (has_file_format()) {
      if (file_format_ != &::google::protobuf::internal::kEmptyString) {
        file_format_->clear();
      }
    }
    if (has_record_format()) {
      if (record_format_ != &::google::protobuf::internal::kEmptyString) {
        record_format_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TaskInput_Part::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string file_pattern = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_pattern()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_file_format;
        break;
      }

      // optional string file_format = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_format:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_format()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_record_format;
        break;
      }

      // optional string record_format = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_record_format:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_record_format()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TaskInput_Part::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string file_pattern = 7;
  if (has_file_pattern()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->file_pattern(), output);
  }

  // optional string file_format = 8;
  if (has_file_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->file_format(), output);
  }

  // optional string record_format = 9;
  if (has_record_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->record_format(), output);
  }

}

int TaskInput_Part::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string file_pattern = 7;
    if (has_file_pattern()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_pattern());
    }

    // optional string file_format = 8;
    if (has_file_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_format());
    }

    // optional string record_format = 9;
    if (has_record_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->record_format());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskInput_Part::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TaskInput_Part*>(&from));
}

void TaskInput_Part::MergeFrom(const TaskInput_Part& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_pattern()) {
      set_file_pattern(from.file_pattern());
    }
    if (from.has_file_format()) {
      set_file_format(from.file_format());
    }
    if (from.has_record_format()) {
      set_record_format(from.record_format());
    }
  }
}

void TaskInput_Part::CopyFrom(const TaskInput_Part& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskInput_Part::IsInitialized() const {

  return true;
}

void TaskInput_Part::Swap(TaskInput_Part* other) {
  if (other != this) {
    std::swap(file_pattern_, other->file_pattern_);
    std::swap(file_format_, other->file_format_);
    std::swap(record_format_, other->record_format_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TaskInput_Part::GetTypeName() const {
  return "chrome_lang_id.TaskInput.Part";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int TaskInput::kNameFieldNumber;
const int TaskInput::kCreatorFieldNumber;
const int TaskInput::kFileFormatFieldNumber;
const int TaskInput::kRecordFormatFieldNumber;
const int TaskInput::kMultiFileFieldNumber;
const int TaskInput::kPartFieldNumber;
#endif  // !_MSC_VER

TaskInput::TaskInput()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TaskInput::InitAsDefaultInstance() {
}

TaskInput::TaskInput(const TaskInput& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TaskInput::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  creator_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  multi_file_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskInput::~TaskInput() {
  SharedDtor();
}

void TaskInput::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (creator_ != &::google::protobuf::internal::kEmptyString) {
    delete creator_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TaskInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TaskInput& TaskInput::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_task_5fspec_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_task_5fspec_2eproto();
#endif
  return *default_instance_;
}

TaskInput* TaskInput::default_instance_ = NULL;

TaskInput* TaskInput::New() const {
  return new TaskInput;
}

void TaskInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_creator()) {
      if (creator_ != &::google::protobuf::internal::kEmptyString) {
        creator_->clear();
      }
    }
    multi_file_ = false;
  }
  file_format_.Clear();
  record_format_.Clear();
  part_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TaskInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_creator;
        break;
      }

      // optional string creator = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_creator:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_creator()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_file_format;
        break;
      }

      // repeated string file_format = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_format:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_file_format()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_file_format;
        if (input->ExpectTag(34)) goto parse_record_format;
        break;
      }

      // repeated string record_format = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_record_format:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_record_format()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_record_format;
        if (input->ExpectTag(40)) goto parse_multi_file;
        break;
      }

      // optional bool multi_file = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_multi_file:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &multi_file_)));
          set_has_multi_file();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(51)) goto parse_part;
        break;
      }

      // repeated group Part = 6 {
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_START_GROUP) {
         parse_part:
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroupNoVirtual(
                6, input, add_part()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(51)) goto parse_part;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TaskInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional string creator = 2;
  if (has_creator()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->creator(), output);
  }

  // repeated string file_format = 3;
  for (int i = 0; i < this->file_format_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->file_format(i), output);
  }

  // repeated string record_format = 4;
  for (int i = 0; i < this->record_format_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->record_format(i), output);
  }

  // optional bool multi_file = 5 [default = false];
  if (has_multi_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->multi_file(), output);
  }

  // repeated group Part = 6 {
  for (int i = 0; i < this->part_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteGroup(
      6, this->part(i), output);
  }

}

int TaskInput::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string creator = 2;
    if (has_creator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->creator());
    }

    // optional bool multi_file = 5 [default = false];
    if (has_multi_file()) {
      total_size += 1 + 1;
    }

  }
  // repeated string file_format = 3;
  total_size += 1 * this->file_format_size();
  for (int i = 0; i < this->file_format_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->file_format(i));
  }

  // repeated string record_format = 4;
  total_size += 1 * this->record_format_size();
  for (int i = 0; i < this->record_format_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->record_format(i));
  }

  // repeated group Part = 6 {
  total_size += 2 * this->part_size();
  for (int i = 0; i < this->part_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::GroupSizeNoVirtual(
        this->part(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskInput::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TaskInput*>(&from));
}

void TaskInput::MergeFrom(const TaskInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  file_format_.MergeFrom(from.file_format_);
  record_format_.MergeFrom(from.record_format_);
  part_.MergeFrom(from.part_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_creator()) {
      set_creator(from.creator());
    }
    if (from.has_multi_file()) {
      set_multi_file(from.multi_file());
    }
  }
}

void TaskInput::CopyFrom(const TaskInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TaskInput::Swap(TaskInput* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(creator_, other->creator_);
    file_format_.Swap(&other->file_format_);
    record_format_.Swap(&other->record_format_);
    std::swap(multi_file_, other->multi_file_);
    part_.Swap(&other->part_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TaskInput::GetTypeName() const {
  return "chrome_lang_id.TaskInput";
}


// ===================================================================

#ifndef _MSC_VER
const int TaskOutput::kNameFieldNumber;
const int TaskOutput::kFileFormatFieldNumber;
const int TaskOutput::kRecordFormatFieldNumber;
const int TaskOutput::kShardsFieldNumber;
const int TaskOutput::kFileBaseFieldNumber;
const int TaskOutput::kFileExtensionFieldNumber;
#endif  // !_MSC_VER

TaskOutput::TaskOutput()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TaskOutput::InitAsDefaultInstance() {
}

TaskOutput::TaskOutput(const TaskOutput& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TaskOutput::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  file_format_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  record_format_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  shards_ = 0;
  file_base_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  file_extension_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskOutput::~TaskOutput() {
  SharedDtor();
}

void TaskOutput::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (file_format_ != &::google::protobuf::internal::kEmptyString) {
    delete file_format_;
  }
  if (record_format_ != &::google::protobuf::internal::kEmptyString) {
    delete record_format_;
  }
  if (file_base_ != &::google::protobuf::internal::kEmptyString) {
    delete file_base_;
  }
  if (file_extension_ != &::google::protobuf::internal::kEmptyString) {
    delete file_extension_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TaskOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TaskOutput& TaskOutput::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_task_5fspec_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_task_5fspec_2eproto();
#endif
  return *default_instance_;
}

TaskOutput* TaskOutput::default_instance_ = NULL;

TaskOutput* TaskOutput::New() const {
  return new TaskOutput;
}

void TaskOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_file_format()) {
      if (file_format_ != &::google::protobuf::internal::kEmptyString) {
        file_format_->clear();
      }
    }
    if (has_record_format()) {
      if (record_format_ != &::google::protobuf::internal::kEmptyString) {
        record_format_->clear();
      }
    }
    shards_ = 0;
    if (has_file_base()) {
      if (file_base_ != &::google::protobuf::internal::kEmptyString) {
        file_base_->clear();
      }
    }
    if (has_file_extension()) {
      if (file_extension_ != &::google::protobuf::internal::kEmptyString) {
        file_extension_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TaskOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_file_format;
        break;
      }

      // optional string file_format = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_format:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_format()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_record_format;
        break;
      }

      // optional string record_format = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_record_format:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_record_format()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_shards;
        break;
      }

      // optional int32 shards = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shards_)));
          set_has_shards();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_file_base;
        break;
      }

      // optional string file_base = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_base:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_file_extension;
        break;
      }

      // optional string file_extension = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_extension:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_extension()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TaskOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional string file_format = 2;
  if (has_file_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->file_format(), output);
  }

  // optional string record_format = 3;
  if (has_record_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->record_format(), output);
  }

  // optional int32 shards = 4 [default = 0];
  if (has_shards()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->shards(), output);
  }

  // optional string file_base = 5;
  if (has_file_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->file_base(), output);
  }

  // optional string file_extension = 6;
  if (has_file_extension()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->file_extension(), output);
  }

}

int TaskOutput::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string file_format = 2;
    if (has_file_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_format());
    }

    // optional string record_format = 3;
    if (has_record_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->record_format());
    }

    // optional int32 shards = 4 [default = 0];
    if (has_shards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shards());
    }

    // optional string file_base = 5;
    if (has_file_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_base());
    }

    // optional string file_extension = 6;
    if (has_file_extension()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_extension());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskOutput::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TaskOutput*>(&from));
}

void TaskOutput::MergeFrom(const TaskOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_file_format()) {
      set_file_format(from.file_format());
    }
    if (from.has_record_format()) {
      set_record_format(from.record_format());
    }
    if (from.has_shards()) {
      set_shards(from.shards());
    }
    if (from.has_file_base()) {
      set_file_base(from.file_base());
    }
    if (from.has_file_extension()) {
      set_file_extension(from.file_extension());
    }
  }
}

void TaskOutput::CopyFrom(const TaskOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TaskOutput::Swap(TaskOutput* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(file_format_, other->file_format_);
    std::swap(record_format_, other->record_format_);
    std::swap(shards_, other->shards_);
    std::swap(file_base_, other->file_base_);
    std::swap(file_extension_, other->file_extension_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TaskOutput::GetTypeName() const {
  return "chrome_lang_id.TaskOutput";
}


// ===================================================================

#ifndef _MSC_VER
const int TaskSpec_Parameter::kNameFieldNumber;
const int TaskSpec_Parameter::kValueFieldNumber;
#endif  // !_MSC_VER

TaskSpec_Parameter::TaskSpec_Parameter()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TaskSpec_Parameter::InitAsDefaultInstance() {
}

TaskSpec_Parameter::TaskSpec_Parameter(const TaskSpec_Parameter& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TaskSpec_Parameter::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskSpec_Parameter::~TaskSpec_Parameter() {
  SharedDtor();
}

void TaskSpec_Parameter::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TaskSpec_Parameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TaskSpec_Parameter& TaskSpec_Parameter::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_task_5fspec_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_task_5fspec_2eproto();
#endif
  return *default_instance_;
}

TaskSpec_Parameter* TaskSpec_Parameter::default_instance_ = NULL;

TaskSpec_Parameter* TaskSpec_Parameter::New() const {
  return new TaskSpec_Parameter;
}

void TaskSpec_Parameter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TaskSpec_Parameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_value;
        break;
      }

      // optional string value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TaskSpec_Parameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }

  // optional string value = 5;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->value(), output);
  }

}

int TaskSpec_Parameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string value = 5;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskSpec_Parameter::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TaskSpec_Parameter*>(&from));
}

void TaskSpec_Parameter::MergeFrom(const TaskSpec_Parameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
}

void TaskSpec_Parameter::CopyFrom(const TaskSpec_Parameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskSpec_Parameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TaskSpec_Parameter::Swap(TaskSpec_Parameter* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TaskSpec_Parameter::GetTypeName() const {
  return "chrome_lang_id.TaskSpec.Parameter";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int TaskSpec::kTaskNameFieldNumber;
const int TaskSpec::kTaskTypeFieldNumber;
const int TaskSpec::kParameterFieldNumber;
const int TaskSpec::kInputFieldNumber;
const int TaskSpec::kOutputFieldNumber;
#endif  // !_MSC_VER

TaskSpec::TaskSpec()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TaskSpec::InitAsDefaultInstance() {
}

TaskSpec::TaskSpec(const TaskSpec& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TaskSpec::SharedCtor() {
  _cached_size_ = 0;
  task_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  task_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskSpec::~TaskSpec() {
  SharedDtor();
}

void TaskSpec::SharedDtor() {
  if (task_name_ != &::google::protobuf::internal::kEmptyString) {
    delete task_name_;
  }
  if (task_type_ != &::google::protobuf::internal::kEmptyString) {
    delete task_type_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TaskSpec::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TaskSpec& TaskSpec::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_task_5fspec_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_task_5fspec_2eproto();
#endif
  return *default_instance_;
}

TaskSpec* TaskSpec::default_instance_ = NULL;

TaskSpec* TaskSpec::New() const {
  return new TaskSpec;
}

void TaskSpec::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_task_name()) {
      if (task_name_ != &::google::protobuf::internal::kEmptyString) {
        task_name_->clear();
      }
    }
    if (has_task_type()) {
      if (task_type_ != &::google::protobuf::internal::kEmptyString) {
        task_type_->clear();
      }
    }
  }
  parameter_.Clear();
  input_.Clear();
  output_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TaskSpec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string task_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_task_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_task_type;
        break;
      }

      // optional string task_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_task_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(27)) goto parse_parameter;
        break;
      }

      // repeated group Parameter = 3 {
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_START_GROUP) {
         parse_parameter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroupNoVirtual(
                3, input, add_parameter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(27)) goto parse_parameter;
        if (input->ExpectTag(50)) goto parse_input;
        break;
      }

      // repeated .chrome_lang_id.TaskInput input = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_input:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_input()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_input;
        if (input->ExpectTag(58)) goto parse_output;
        break;
      }

      // repeated .chrome_lang_id.TaskOutput output = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_output:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_output()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_output;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TaskSpec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string task_name = 1;
  if (has_task_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->task_name(), output);
  }

  // optional string task_type = 2;
  if (has_task_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->task_type(), output);
  }

  // repeated group Parameter = 3 {
  for (int i = 0; i < this->parameter_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteGroup(
      3, this->parameter(i), output);
  }

  // repeated .chrome_lang_id.TaskInput input = 6;
  for (int i = 0; i < this->input_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->input(i), output);
  }

  // repeated .chrome_lang_id.TaskOutput output = 7;
  for (int i = 0; i < this->output_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->output(i), output);
  }

}

int TaskSpec::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string task_name = 1;
    if (has_task_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->task_name());
    }

    // optional string task_type = 2;
    if (has_task_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->task_type());
    }

  }
  // repeated group Parameter = 3 {
  total_size += 2 * this->parameter_size();
  for (int i = 0; i < this->parameter_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::GroupSizeNoVirtual(
        this->parameter(i));
  }

  // repeated .chrome_lang_id.TaskInput input = 6;
  total_size += 1 * this->input_size();
  for (int i = 0; i < this->input_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->input(i));
  }

  // repeated .chrome_lang_id.TaskOutput output = 7;
  total_size += 1 * this->output_size();
  for (int i = 0; i < this->output_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->output(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskSpec::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TaskSpec*>(&from));
}

void TaskSpec::MergeFrom(const TaskSpec& from) {
  GOOGLE_CHECK_NE(&from, this);
  parameter_.MergeFrom(from.parameter_);
  input_.MergeFrom(from.input_);
  output_.MergeFrom(from.output_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_name()) {
      set_task_name(from.task_name());
    }
    if (from.has_task_type()) {
      set_task_type(from.task_type());
    }
  }
}

void TaskSpec::CopyFrom(const TaskSpec& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskSpec::IsInitialized() const {

  for (int i = 0; i < parameter_size(); i++) {
    if (!this->parameter(i).IsInitialized()) return false;
  }
  for (int i = 0; i < input_size(); i++) {
    if (!this->input(i).IsInitialized()) return false;
  }
  for (int i = 0; i < output_size(); i++) {
    if (!this->output(i).IsInitialized()) return false;
  }
  return true;
}

void TaskSpec::Swap(TaskSpec* other) {
  if (other != this) {
    std::swap(task_name_, other->task_name_);
    std::swap(task_type_, other->task_type_);
    parameter_.Swap(&other->parameter_);
    input_.Swap(&other->input_);
    output_.Swap(&other->output_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TaskSpec::GetTypeName() const {
  return "chrome_lang_id.TaskSpec";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace chrome_lang_id

// @@protoc_insertion_point(global_scope)
