// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: feature_extractor.proto

#ifndef PROTOBUF_feature_5fextractor_2eproto__INCLUDED
#define PROTOBUF_feature_5fextractor_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace chrome_lang_id {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_feature_5fextractor_2eproto();
void protobuf_AssignDesc_feature_5fextractor_2eproto();
void protobuf_ShutdownFile_feature_5fextractor_2eproto();

class Parameter;
class FeatureFunctionDescriptor;
class FeatureExtractorDescriptor;

// ===================================================================

class Parameter : public ::google::protobuf::MessageLite {
 public:
  Parameter();
  virtual ~Parameter();

  Parameter(const Parameter& from);

  inline Parameter& operator=(const Parameter& from) {
    CopyFrom(from);
    return *this;
  }

  static const Parameter& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Parameter* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Parameter* other);

  // implements Message ----------------------------------------------

  Parameter* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Parameter& from);
  void MergeFrom(const Parameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:chrome_lang_id.Parameter)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();

  ::std::string* name_;
  ::std::string* value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_feature_5fextractor_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_feature_5fextractor_2eproto();
  #endif
  friend void protobuf_AssignDesc_feature_5fextractor_2eproto();
  friend void protobuf_ShutdownFile_feature_5fextractor_2eproto();

  void InitAsDefaultInstance();
  static Parameter* default_instance_;
};
// -------------------------------------------------------------------

class FeatureFunctionDescriptor : public ::google::protobuf::MessageLite {
 public:
  FeatureFunctionDescriptor();
  virtual ~FeatureFunctionDescriptor();

  FeatureFunctionDescriptor(const FeatureFunctionDescriptor& from);

  inline FeatureFunctionDescriptor& operator=(const FeatureFunctionDescriptor& from) {
    CopyFrom(from);
    return *this;
  }

  static const FeatureFunctionDescriptor& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const FeatureFunctionDescriptor* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(FeatureFunctionDescriptor* other);

  // implements Message ----------------------------------------------

  FeatureFunctionDescriptor* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const FeatureFunctionDescriptor& from);
  void MergeFrom(const FeatureFunctionDescriptor& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 argument = 3 [default = 0];
  inline bool has_argument() const;
  inline void clear_argument();
  static const int kArgumentFieldNumber = 3;
  inline ::google::protobuf::int32 argument() const;
  inline void set_argument(::google::protobuf::int32 value);

  // repeated .chrome_lang_id.Parameter parameter = 4;
  inline int parameter_size() const;
  inline void clear_parameter();
  static const int kParameterFieldNumber = 4;
  inline const ::chrome_lang_id::Parameter& parameter(int index) const;
  inline ::chrome_lang_id::Parameter* mutable_parameter(int index);
  inline ::chrome_lang_id::Parameter* add_parameter();
  inline const ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::Parameter >&
      parameter() const;
  inline ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::Parameter >*
      mutable_parameter();

  // repeated .chrome_lang_id.FeatureFunctionDescriptor feature = 7;
  inline int feature_size() const;
  inline void clear_feature();
  static const int kFeatureFieldNumber = 7;
  inline const ::chrome_lang_id::FeatureFunctionDescriptor& feature(int index) const;
  inline ::chrome_lang_id::FeatureFunctionDescriptor* mutable_feature(int index);
  inline ::chrome_lang_id::FeatureFunctionDescriptor* add_feature();
  inline const ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::FeatureFunctionDescriptor >&
      feature() const;
  inline ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::FeatureFunctionDescriptor >*
      mutable_feature();

  // @@protoc_insertion_point(class_scope:chrome_lang_id.FeatureFunctionDescriptor)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_argument();
  inline void clear_has_argument();

  ::std::string* type_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::Parameter > parameter_;
  ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::FeatureFunctionDescriptor > feature_;
  ::google::protobuf::int32 argument_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_feature_5fextractor_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_feature_5fextractor_2eproto();
  #endif
  friend void protobuf_AssignDesc_feature_5fextractor_2eproto();
  friend void protobuf_ShutdownFile_feature_5fextractor_2eproto();

  void InitAsDefaultInstance();
  static FeatureFunctionDescriptor* default_instance_;
};
// -------------------------------------------------------------------

class FeatureExtractorDescriptor : public ::google::protobuf::MessageLite {
 public:
  FeatureExtractorDescriptor();
  virtual ~FeatureExtractorDescriptor();

  FeatureExtractorDescriptor(const FeatureExtractorDescriptor& from);

  inline FeatureExtractorDescriptor& operator=(const FeatureExtractorDescriptor& from) {
    CopyFrom(from);
    return *this;
  }

  static const FeatureExtractorDescriptor& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const FeatureExtractorDescriptor* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(FeatureExtractorDescriptor* other);

  // implements Message ----------------------------------------------

  FeatureExtractorDescriptor* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const FeatureExtractorDescriptor& from);
  void MergeFrom(const FeatureExtractorDescriptor& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .chrome_lang_id.FeatureFunctionDescriptor feature = 1;
  inline int feature_size() const;
  inline void clear_feature();
  static const int kFeatureFieldNumber = 1;
  inline const ::chrome_lang_id::FeatureFunctionDescriptor& feature(int index) const;
  inline ::chrome_lang_id::FeatureFunctionDescriptor* mutable_feature(int index);
  inline ::chrome_lang_id::FeatureFunctionDescriptor* add_feature();
  inline const ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::FeatureFunctionDescriptor >&
      feature() const;
  inline ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::FeatureFunctionDescriptor >*
      mutable_feature();

  // @@protoc_insertion_point(class_scope:chrome_lang_id.FeatureExtractorDescriptor)
 private:

  ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::FeatureFunctionDescriptor > feature_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_feature_5fextractor_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_feature_5fextractor_2eproto();
  #endif
  friend void protobuf_AssignDesc_feature_5fextractor_2eproto();
  friend void protobuf_ShutdownFile_feature_5fextractor_2eproto();

  void InitAsDefaultInstance();
  static FeatureExtractorDescriptor* default_instance_;
};
// ===================================================================


// ===================================================================

// Parameter

// optional string name = 1;
inline bool Parameter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Parameter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Parameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Parameter::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Parameter::name() const {
  return *name_;
}
inline void Parameter::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Parameter::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Parameter::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Parameter::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Parameter::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Parameter::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string value = 2;
inline bool Parameter::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Parameter::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Parameter::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Parameter::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& Parameter::value() const {
  return *value_;
}
inline void Parameter::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void Parameter::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void Parameter::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Parameter::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* Parameter::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Parameter::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// FeatureFunctionDescriptor

// required string type = 1;
inline bool FeatureFunctionDescriptor::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FeatureFunctionDescriptor::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FeatureFunctionDescriptor::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FeatureFunctionDescriptor::clear_type() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& FeatureFunctionDescriptor::type() const {
  return *type_;
}
inline void FeatureFunctionDescriptor::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void FeatureFunctionDescriptor::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void FeatureFunctionDescriptor::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FeatureFunctionDescriptor::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* FeatureFunctionDescriptor::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FeatureFunctionDescriptor::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string name = 2;
inline bool FeatureFunctionDescriptor::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FeatureFunctionDescriptor::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FeatureFunctionDescriptor::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FeatureFunctionDescriptor::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& FeatureFunctionDescriptor::name() const {
  return *name_;
}
inline void FeatureFunctionDescriptor::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FeatureFunctionDescriptor::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FeatureFunctionDescriptor::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FeatureFunctionDescriptor::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* FeatureFunctionDescriptor::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FeatureFunctionDescriptor::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 argument = 3 [default = 0];
inline bool FeatureFunctionDescriptor::has_argument() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FeatureFunctionDescriptor::set_has_argument() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FeatureFunctionDescriptor::clear_has_argument() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FeatureFunctionDescriptor::clear_argument() {
  argument_ = 0;
  clear_has_argument();
}
inline ::google::protobuf::int32 FeatureFunctionDescriptor::argument() const {
  return argument_;
}
inline void FeatureFunctionDescriptor::set_argument(::google::protobuf::int32 value) {
  set_has_argument();
  argument_ = value;
}

// repeated .chrome_lang_id.Parameter parameter = 4;
inline int FeatureFunctionDescriptor::parameter_size() const {
  return parameter_.size();
}
inline void FeatureFunctionDescriptor::clear_parameter() {
  parameter_.Clear();
}
inline const ::chrome_lang_id::Parameter& FeatureFunctionDescriptor::parameter(int index) const {
  return parameter_.Get(index);
}
inline ::chrome_lang_id::Parameter* FeatureFunctionDescriptor::mutable_parameter(int index) {
  return parameter_.Mutable(index);
}
inline ::chrome_lang_id::Parameter* FeatureFunctionDescriptor::add_parameter() {
  return parameter_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::Parameter >&
FeatureFunctionDescriptor::parameter() const {
  return parameter_;
}
inline ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::Parameter >*
FeatureFunctionDescriptor::mutable_parameter() {
  return &parameter_;
}

// repeated .chrome_lang_id.FeatureFunctionDescriptor feature = 7;
inline int FeatureFunctionDescriptor::feature_size() const {
  return feature_.size();
}
inline void FeatureFunctionDescriptor::clear_feature() {
  feature_.Clear();
}
inline const ::chrome_lang_id::FeatureFunctionDescriptor& FeatureFunctionDescriptor::feature(int index) const {
  return feature_.Get(index);
}
inline ::chrome_lang_id::FeatureFunctionDescriptor* FeatureFunctionDescriptor::mutable_feature(int index) {
  return feature_.Mutable(index);
}
inline ::chrome_lang_id::FeatureFunctionDescriptor* FeatureFunctionDescriptor::add_feature() {
  return feature_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::FeatureFunctionDescriptor >&
FeatureFunctionDescriptor::feature() const {
  return feature_;
}
inline ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::FeatureFunctionDescriptor >*
FeatureFunctionDescriptor::mutable_feature() {
  return &feature_;
}

// -------------------------------------------------------------------

// FeatureExtractorDescriptor

// repeated .chrome_lang_id.FeatureFunctionDescriptor feature = 1;
inline int FeatureExtractorDescriptor::feature_size() const {
  return feature_.size();
}
inline void FeatureExtractorDescriptor::clear_feature() {
  feature_.Clear();
}
inline const ::chrome_lang_id::FeatureFunctionDescriptor& FeatureExtractorDescriptor::feature(int index) const {
  return feature_.Get(index);
}
inline ::chrome_lang_id::FeatureFunctionDescriptor* FeatureExtractorDescriptor::mutable_feature(int index) {
  return feature_.Mutable(index);
}
inline ::chrome_lang_id::FeatureFunctionDescriptor* FeatureExtractorDescriptor::add_feature() {
  return feature_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::FeatureFunctionDescriptor >&
FeatureExtractorDescriptor::feature() const {
  return feature_;
}
inline ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::FeatureFunctionDescriptor >*
FeatureExtractorDescriptor::mutable_feature() {
  return &feature_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace chrome_lang_id

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_feature_5fextractor_2eproto__INCLUDED
