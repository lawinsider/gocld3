// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sentence.proto

#ifndef PROTOBUF_sentence_2eproto__INCLUDED
#define PROTOBUF_sentence_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace chrome_lang_id {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_sentence_2eproto();
void protobuf_AssignDesc_sentence_2eproto();
void protobuf_ShutdownFile_sentence_2eproto();

class Sentence;
class Token;

enum Token_BreakLevel {
  Token_BreakLevel_NO_BREAK = 0,
  Token_BreakLevel_SPACE_BREAK = 1,
  Token_BreakLevel_LINE_BREAK = 2,
  Token_BreakLevel_SENTENCE_BREAK = 3
};
bool Token_BreakLevel_IsValid(int value);
const Token_BreakLevel Token_BreakLevel_BreakLevel_MIN = Token_BreakLevel_NO_BREAK;
const Token_BreakLevel Token_BreakLevel_BreakLevel_MAX = Token_BreakLevel_SENTENCE_BREAK;
const int Token_BreakLevel_BreakLevel_ARRAYSIZE = Token_BreakLevel_BreakLevel_MAX + 1;

// ===================================================================

class Sentence : public ::google::protobuf::MessageLite {
 public:
  Sentence();
  virtual ~Sentence();

  Sentence(const Sentence& from);

  inline Sentence& operator=(const Sentence& from) {
    CopyFrom(from);
    return *this;
  }

  static const Sentence& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Sentence* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Sentence* other);

  // implements Message ----------------------------------------------

  Sentence* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Sentence& from);
  void MergeFrom(const Sentence& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional string text = 2;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 2;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  inline void set_allocated_text(::std::string* text);

  // repeated .chrome_lang_id.Token token = 3;
  inline int token_size() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 3;
  inline const ::chrome_lang_id::Token& token(int index) const;
  inline ::chrome_lang_id::Token* mutable_token(int index);
  inline ::chrome_lang_id::Token* add_token();
  inline const ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::Token >&
      token() const;
  inline ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::Token >*
      mutable_token();

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Sentence)
  // @@protoc_insertion_point(class_scope:chrome_lang_id.Sentence)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_text();
  inline void clear_has_text();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::std::string* id_;
  ::std::string* text_;
  ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::Token > token_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_sentence_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_sentence_2eproto();
  #endif
  friend void protobuf_AssignDesc_sentence_2eproto();
  friend void protobuf_ShutdownFile_sentence_2eproto();

  void InitAsDefaultInstance();
  static Sentence* default_instance_;
};
// -------------------------------------------------------------------

class Token : public ::google::protobuf::MessageLite {
 public:
  Token();
  virtual ~Token();

  Token(const Token& from);

  inline Token& operator=(const Token& from) {
    CopyFrom(from);
    return *this;
  }

  static const Token& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Token* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Token* other);

  // implements Message ----------------------------------------------

  Token* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Token& from);
  void MergeFrom(const Token& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef Token_BreakLevel BreakLevel;
  static const BreakLevel NO_BREAK = Token_BreakLevel_NO_BREAK;
  static const BreakLevel SPACE_BREAK = Token_BreakLevel_SPACE_BREAK;
  static const BreakLevel LINE_BREAK = Token_BreakLevel_LINE_BREAK;
  static const BreakLevel SENTENCE_BREAK = Token_BreakLevel_SENTENCE_BREAK;
  static inline bool BreakLevel_IsValid(int value) {
    return Token_BreakLevel_IsValid(value);
  }
  static const BreakLevel BreakLevel_MIN =
    Token_BreakLevel_BreakLevel_MIN;
  static const BreakLevel BreakLevel_MAX =
    Token_BreakLevel_BreakLevel_MAX;
  static const int BreakLevel_ARRAYSIZE =
    Token_BreakLevel_BreakLevel_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // required string word = 1;
  inline bool has_word() const;
  inline void clear_word();
  static const int kWordFieldNumber = 1;
  inline const ::std::string& word() const;
  inline void set_word(const ::std::string& value);
  inline void set_word(const char* value);
  inline void set_word(const char* value, size_t size);
  inline ::std::string* mutable_word();
  inline ::std::string* release_word();
  inline void set_allocated_word(::std::string* word);

  // required int32 start = 2;
  inline bool has_start() const;
  inline void clear_start();
  static const int kStartFieldNumber = 2;
  inline ::google::protobuf::int32 start() const;
  inline void set_start(::google::protobuf::int32 value);

  // required int32 end = 3;
  inline bool has_end() const;
  inline void clear_end();
  static const int kEndFieldNumber = 3;
  inline ::google::protobuf::int32 end() const;
  inline void set_end(::google::protobuf::int32 value);

  // optional int32 head = 4 [default = -1];
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 4;
  inline ::google::protobuf::int32 head() const;
  inline void set_head(::google::protobuf::int32 value);

  // optional string tag = 5;
  inline bool has_tag() const;
  inline void clear_tag();
  static const int kTagFieldNumber = 5;
  inline const ::std::string& tag() const;
  inline void set_tag(const ::std::string& value);
  inline void set_tag(const char* value);
  inline void set_tag(const char* value, size_t size);
  inline ::std::string* mutable_tag();
  inline ::std::string* release_tag();
  inline void set_allocated_tag(::std::string* tag);

  // optional string category = 6;
  inline bool has_category() const;
  inline void clear_category();
  static const int kCategoryFieldNumber = 6;
  inline const ::std::string& category() const;
  inline void set_category(const ::std::string& value);
  inline void set_category(const char* value);
  inline void set_category(const char* value, size_t size);
  inline ::std::string* mutable_category();
  inline ::std::string* release_category();
  inline void set_allocated_category(::std::string* category);

  // optional string label = 7;
  inline bool has_label() const;
  inline void clear_label();
  static const int kLabelFieldNumber = 7;
  inline const ::std::string& label() const;
  inline void set_label(const ::std::string& value);
  inline void set_label(const char* value);
  inline void set_label(const char* value, size_t size);
  inline ::std::string* mutable_label();
  inline ::std::string* release_label();
  inline void set_allocated_label(::std::string* label);

  // optional .chrome_lang_id.Token.BreakLevel break_level = 8 [default = SPACE_BREAK];
  inline bool has_break_level() const;
  inline void clear_break_level();
  static const int kBreakLevelFieldNumber = 8;
  inline ::chrome_lang_id::Token_BreakLevel break_level() const;
  inline void set_break_level(::chrome_lang_id::Token_BreakLevel value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Token)
  // @@protoc_insertion_point(class_scope:chrome_lang_id.Token)
 private:
  inline void set_has_word();
  inline void clear_has_word();
  inline void set_has_start();
  inline void clear_has_start();
  inline void set_has_end();
  inline void clear_has_end();
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_tag();
  inline void clear_has_tag();
  inline void set_has_category();
  inline void clear_has_category();
  inline void set_has_label();
  inline void clear_has_label();
  inline void set_has_break_level();
  inline void clear_has_break_level();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::std::string* word_;
  ::google::protobuf::int32 start_;
  ::google::protobuf::int32 end_;
  ::std::string* tag_;
  ::std::string* category_;
  ::google::protobuf::int32 head_;
  int break_level_;
  ::std::string* label_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_sentence_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_sentence_2eproto();
  #endif
  friend void protobuf_AssignDesc_sentence_2eproto();
  friend void protobuf_ShutdownFile_sentence_2eproto();

  void InitAsDefaultInstance();
  static Token* default_instance_;
};
// ===================================================================


// ===================================================================

// Sentence

// optional string id = 1;
inline bool Sentence::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Sentence::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Sentence::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Sentence::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& Sentence::id() const {
  return *id_;
}
inline void Sentence::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void Sentence::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void Sentence::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Sentence::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* Sentence::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Sentence::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string text = 2;
inline bool Sentence::has_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Sentence::set_has_text() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Sentence::clear_has_text() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Sentence::clear_text() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& Sentence::text() const {
  return *text_;
}
inline void Sentence::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void Sentence::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void Sentence::set_text(const char* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Sentence::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  return text_;
}
inline ::std::string* Sentence::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Sentence::set_allocated_text(::std::string* text) {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (text) {
    set_has_text();
    text_ = text;
  } else {
    clear_has_text();
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .chrome_lang_id.Token token = 3;
inline int Sentence::token_size() const {
  return token_.size();
}
inline void Sentence::clear_token() {
  token_.Clear();
}
inline const ::chrome_lang_id::Token& Sentence::token(int index) const {
  return token_.Get(index);
}
inline ::chrome_lang_id::Token* Sentence::mutable_token(int index) {
  return token_.Mutable(index);
}
inline ::chrome_lang_id::Token* Sentence::add_token() {
  return token_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::Token >&
Sentence::token() const {
  return token_;
}
inline ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::Token >*
Sentence::mutable_token() {
  return &token_;
}

// -------------------------------------------------------------------

// Token

// required string word = 1;
inline bool Token::has_word() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Token::set_has_word() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Token::clear_has_word() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Token::clear_word() {
  if (word_ != &::google::protobuf::internal::kEmptyString) {
    word_->clear();
  }
  clear_has_word();
}
inline const ::std::string& Token::word() const {
  return *word_;
}
inline void Token::set_word(const ::std::string& value) {
  set_has_word();
  if (word_ == &::google::protobuf::internal::kEmptyString) {
    word_ = new ::std::string;
  }
  word_->assign(value);
}
inline void Token::set_word(const char* value) {
  set_has_word();
  if (word_ == &::google::protobuf::internal::kEmptyString) {
    word_ = new ::std::string;
  }
  word_->assign(value);
}
inline void Token::set_word(const char* value, size_t size) {
  set_has_word();
  if (word_ == &::google::protobuf::internal::kEmptyString) {
    word_ = new ::std::string;
  }
  word_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Token::mutable_word() {
  set_has_word();
  if (word_ == &::google::protobuf::internal::kEmptyString) {
    word_ = new ::std::string;
  }
  return word_;
}
inline ::std::string* Token::release_word() {
  clear_has_word();
  if (word_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = word_;
    word_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Token::set_allocated_word(::std::string* word) {
  if (word_ != &::google::protobuf::internal::kEmptyString) {
    delete word_;
  }
  if (word) {
    set_has_word();
    word_ = word;
  } else {
    clear_has_word();
    word_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 start = 2;
inline bool Token::has_start() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Token::set_has_start() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Token::clear_has_start() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Token::clear_start() {
  start_ = 0;
  clear_has_start();
}
inline ::google::protobuf::int32 Token::start() const {
  return start_;
}
inline void Token::set_start(::google::protobuf::int32 value) {
  set_has_start();
  start_ = value;
}

// required int32 end = 3;
inline bool Token::has_end() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Token::set_has_end() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Token::clear_has_end() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Token::clear_end() {
  end_ = 0;
  clear_has_end();
}
inline ::google::protobuf::int32 Token::end() const {
  return end_;
}
inline void Token::set_end(::google::protobuf::int32 value) {
  set_has_end();
  end_ = value;
}

// optional int32 head = 4 [default = -1];
inline bool Token::has_head() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Token::set_has_head() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Token::clear_has_head() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Token::clear_head() {
  head_ = -1;
  clear_has_head();
}
inline ::google::protobuf::int32 Token::head() const {
  return head_;
}
inline void Token::set_head(::google::protobuf::int32 value) {
  set_has_head();
  head_ = value;
}

// optional string tag = 5;
inline bool Token::has_tag() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Token::set_has_tag() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Token::clear_has_tag() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Token::clear_tag() {
  if (tag_ != &::google::protobuf::internal::kEmptyString) {
    tag_->clear();
  }
  clear_has_tag();
}
inline const ::std::string& Token::tag() const {
  return *tag_;
}
inline void Token::set_tag(const ::std::string& value) {
  set_has_tag();
  if (tag_ == &::google::protobuf::internal::kEmptyString) {
    tag_ = new ::std::string;
  }
  tag_->assign(value);
}
inline void Token::set_tag(const char* value) {
  set_has_tag();
  if (tag_ == &::google::protobuf::internal::kEmptyString) {
    tag_ = new ::std::string;
  }
  tag_->assign(value);
}
inline void Token::set_tag(const char* value, size_t size) {
  set_has_tag();
  if (tag_ == &::google::protobuf::internal::kEmptyString) {
    tag_ = new ::std::string;
  }
  tag_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Token::mutable_tag() {
  set_has_tag();
  if (tag_ == &::google::protobuf::internal::kEmptyString) {
    tag_ = new ::std::string;
  }
  return tag_;
}
inline ::std::string* Token::release_tag() {
  clear_has_tag();
  if (tag_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tag_;
    tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Token::set_allocated_tag(::std::string* tag) {
  if (tag_ != &::google::protobuf::internal::kEmptyString) {
    delete tag_;
  }
  if (tag) {
    set_has_tag();
    tag_ = tag;
  } else {
    clear_has_tag();
    tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string category = 6;
inline bool Token::has_category() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Token::set_has_category() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Token::clear_has_category() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Token::clear_category() {
  if (category_ != &::google::protobuf::internal::kEmptyString) {
    category_->clear();
  }
  clear_has_category();
}
inline const ::std::string& Token::category() const {
  return *category_;
}
inline void Token::set_category(const ::std::string& value) {
  set_has_category();
  if (category_ == &::google::protobuf::internal::kEmptyString) {
    category_ = new ::std::string;
  }
  category_->assign(value);
}
inline void Token::set_category(const char* value) {
  set_has_category();
  if (category_ == &::google::protobuf::internal::kEmptyString) {
    category_ = new ::std::string;
  }
  category_->assign(value);
}
inline void Token::set_category(const char* value, size_t size) {
  set_has_category();
  if (category_ == &::google::protobuf::internal::kEmptyString) {
    category_ = new ::std::string;
  }
  category_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Token::mutable_category() {
  set_has_category();
  if (category_ == &::google::protobuf::internal::kEmptyString) {
    category_ = new ::std::string;
  }
  return category_;
}
inline ::std::string* Token::release_category() {
  clear_has_category();
  if (category_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = category_;
    category_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Token::set_allocated_category(::std::string* category) {
  if (category_ != &::google::protobuf::internal::kEmptyString) {
    delete category_;
  }
  if (category) {
    set_has_category();
    category_ = category;
  } else {
    clear_has_category();
    category_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string label = 7;
inline bool Token::has_label() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Token::set_has_label() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Token::clear_has_label() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Token::clear_label() {
  if (label_ != &::google::protobuf::internal::kEmptyString) {
    label_->clear();
  }
  clear_has_label();
}
inline const ::std::string& Token::label() const {
  return *label_;
}
inline void Token::set_label(const ::std::string& value) {
  set_has_label();
  if (label_ == &::google::protobuf::internal::kEmptyString) {
    label_ = new ::std::string;
  }
  label_->assign(value);
}
inline void Token::set_label(const char* value) {
  set_has_label();
  if (label_ == &::google::protobuf::internal::kEmptyString) {
    label_ = new ::std::string;
  }
  label_->assign(value);
}
inline void Token::set_label(const char* value, size_t size) {
  set_has_label();
  if (label_ == &::google::protobuf::internal::kEmptyString) {
    label_ = new ::std::string;
  }
  label_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Token::mutable_label() {
  set_has_label();
  if (label_ == &::google::protobuf::internal::kEmptyString) {
    label_ = new ::std::string;
  }
  return label_;
}
inline ::std::string* Token::release_label() {
  clear_has_label();
  if (label_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = label_;
    label_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Token::set_allocated_label(::std::string* label) {
  if (label_ != &::google::protobuf::internal::kEmptyString) {
    delete label_;
  }
  if (label) {
    set_has_label();
    label_ = label;
  } else {
    clear_has_label();
    label_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .chrome_lang_id.Token.BreakLevel break_level = 8 [default = SPACE_BREAK];
inline bool Token::has_break_level() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Token::set_has_break_level() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Token::clear_has_break_level() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Token::clear_break_level() {
  break_level_ = 1;
  clear_has_break_level();
}
inline ::chrome_lang_id::Token_BreakLevel Token::break_level() const {
  return static_cast< ::chrome_lang_id::Token_BreakLevel >(break_level_);
}
inline void Token::set_break_level(::chrome_lang_id::Token_BreakLevel value) {
  assert(::chrome_lang_id::Token_BreakLevel_IsValid(value));
  set_has_break_level();
  break_level_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace chrome_lang_id

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_sentence_2eproto__INCLUDED
